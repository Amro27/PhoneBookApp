{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/services/user.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","userService","formBuilder","submitted","newUser","editedUser","users","getUsers","registerForm","group","firstName","required","minLength","pattern","password","invalid","alert","getUsersFromData","user","userForm","editUserForm","length","isNewUser","addUser","updateUser","deleteUser","showAddUserForm","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","UserService","upersons","Name","Number","push","index","findIndex","u","splice","indexOf","providedIn","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\r\nimport { User } from './models/user';\r\nimport { UserService } from './services/user.service';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n  users: User[];\r\n  userForm: boolean;\r\n  isNewUser: boolean;\r\n  newUser: any = {};\r\n  editUserForm: boolean;\r\n  editedUser: any = {};\r\n\r\n  constructor(private userService: UserService, private formBuilder: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.users = this.getUsers();\r\n    this.registerForm = this.formBuilder.group({\r\n      firstName: ['', [Validators.required, Validators.minLength(11), Validators.pattern(/^[0-9]*$/)]],\r\n      // lastName: ['', Validators.required, Validators.pattern(new RegExp(\"[0-9 ]{12}\"))],\r\n      // email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(3),\r\n        Validators.pattern(/^[A-z]*$/)]]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // stop the process here if form is invalid\r\n    if (this.registerForm.invalid) {\r\n        return;\r\n    }\r\n\r\n    alert('SUCCESS!!');\r\n  }\r\n\r\n  getUsers(): User[] {\r\n    return this.userService.getUsersFromData();\r\n  }\r\n\r\n  showEditUserForm(user: User) {\r\n    if (!user) {\r\n      this.userForm = false;\r\n      return;\r\n    }\r\n    this.editUserForm = true;\r\n    this.editedUser = user;\r\n  }\r\n\r\n  showAddUserForm() {\r\n    // resets form if edited user\r\n    if (this.users.length) {\r\n      this.newUser = {};\r\n    }\r\n    this.userForm = true;\r\n    this.isNewUser = true;\r\n\r\n  }\r\n\r\n  saveUser(user: User) {\r\n    if (this.isNewUser) {\r\n      // add a new user\r\n      this.userService.addUser(user);\r\n    }\r\n    this.userForm = false;\r\n  }\r\n\r\n  updateUser() {\r\n    this.userService.updateUser(this.editedUser);\r\n    this.editUserForm = false;\r\n    this.editedUser = {};\r\n  }\r\n\r\n  removeUser(user: User) {\r\n    this.userService.deleteUser(user);\r\n  }\r\n\r\n  cancelEdits() {\r\n    this.editedUser = {};\r\n    this.editUserForm = false;\r\n  }\r\n\r\n  cancelNewUser() {\r\n    this.newUser = {};\r\n    this.userForm = false;\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-12 mt-4\">\r\n      <h1 class=\"text-center\">User List</h1>\r\n      <input type=\"text\" id=\"myInput\" onkeyup=\"myFunction()\" placeholder=\"Search for names..\" title=\"Type in a name\">\r\n      <table id=\"myTable\" class=\"table table-bordered table-striped table-hover\">\r\n        <thead>\r\n          <tr>\r\n            <!-- <th class=\"text-center\">ID</th> -->\r\n            <th class=\"text-center\">Name</th>\r\n            <th class=\"text-center\">Number</th>\r\n            <th class=\"text-center\">&nbsp;</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr *ngFor=\"let user of users\">\r\n            <!-- <td>{{ user.id }}</td> -->\r\n            <td>{{ user.Name }}</td>\r\n            <td>{{ user.Number }}</td>\r\n\r\n            <td>\r\n              <button type=\"button\" class=\"btn btn-info btn-sm mr-2\" (click)=\"showEditUserForm(user)\">Edit</button>\r\n\r\n              <button type=\"button\" class=\"btn btn-danger btn-sm\" (click)=\"removeUser(user)\">Delete</button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <button class=\"btn btn-success\" (click)=\"showAddUserForm()\">Add New User</button>\r\n\r\n      <div class=\"mt-4\">\r\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\" *ngIf=\"userForm\" #loginForm=\"ngForm\">\r\n          <h2>Add New User</h2>\r\n          <div class=\"form-group\">\r\n              <label>Name</label>\r\n              <input name=\"password\" [(ngModel)]=\"newUser.Name\" type=\"text\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; registerForm.controls.password.errors }\"  />\r\n              <div *ngIf=\"registerForm.controls.password.errors\" class=\"text-danger\">\r\n                  <div *ngIf=\"registerForm.controls.password.errors.required\">Name is required</div>\r\n                  <div *ngIf=\"registerForm.controls.password.errors.minlength\">Name must be at least 3 characters</div>\r\n                  <div *ngIf=\"registerForm.controls.password.errors.pattern\">Name must only contain characters</div>\r\n              </div>\r\n              <label>Number</label>\r\n              <input name=\"firstName\" [(ngModel)]=\"newUser.Number\" type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; registerForm.controls.firstName.errors }\"  />\r\n              <div *ngIf=\"registerForm.controls.firstName.errors\" class=\"text-danger\">\r\n                  <div *ngIf=\"registerForm.controls.firstName.errors.required\">Number is required</div>\r\n                  <div *ngIf=\"registerForm.controls.firstName.errors.minlength\">Number must be 11 numbers</div>\r\n                  <div *ngIf=\"registerForm.controls.firstName.errors.pattern\">Number cannnot contain characters</div>\r\n              </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n              <button class=\"btn btn-primary\" [disabled]=\"loginForm.form.invalid\" (click)=\"saveUser(newUser)\">Submit</button>\r\n              <button type=\"button\" class=\"btn btn-warning\" (click)=\"cancelNewUser()\">Cancel</button>\r\n          </div>\r\n        </form>\r\n        <!-- <form *ngIf=\"userForm\">\r\n          <h2>Add New User</h2>\r\n          <p>Name: <input type=\"text\" name=\"firstName\" [(ngModel)]=\"newUser.Name\" /></p>\r\n          <p>Number: <input type=\"text\" name=\"lastName\" [(ngModel)]=\"newUser.Number\" /></p>\r\n          <p>\r\n            <button type=\"button\" class=\"btn btn-primary mr-2\" (click)=\"saveUser(newUser)\">Submit</button>\r\n            <button type=\"button\" class=\"btn btn-warning\" (click)=\"cancelNewUser()\">Cancel</button>\r\n          </p>\r\n        </form> -->\r\n\r\n        <!-- <form *ngIf=\"editUserForm\">\r\n          <h2>Edit User Details</h2>\r\n          <p>Name: <input type=\"text\" name=\"Name\" [(ngModel)]=\"editedUser.Name\" /></p>\r\n          <p>Number: <input type=\"text\" name=\"Number\" [(ngModel)]=\"editedUser.Number\" /></p>\r\n          <p>\r\n            <button type=\"button\" class=\"btn btn-primary mr-2\" (click)=\"updateUser()\">Submit</button>\r\n            <button type=\"button\" class=\"btn btn-warning\" (click)=\"cancelEdits()\">Cancel</button>\r\n          </p>\r\n        </form> -->\r\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\" *ngIf=\"editUserForm\" #loginForm=\"ngForm\">\r\n          <h2>Edit User Details</h2>\r\n          <div class=\"form-group\">\r\n              <label>Name</label>\r\n              <input name=\"password\" [(ngModel)]=\"editedUser.Name\" type=\"text\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; registerForm.controls.password.errors }\"  />\r\n              <div *ngIf=\"registerForm.controls.password.errors\" class=\"text-danger\">\r\n                  <div *ngIf=\"registerForm.controls.password.errors.required\">Name is required</div>\r\n                  <div *ngIf=\"registerForm.controls.password.errors.minlength\">Name must be at least 3 characters</div>\r\n                  <div *ngIf=\"registerForm.controls.password.errors.pattern\">Name must only contain characters</div>\r\n              </div>\r\n              <label>Number</label>\r\n              <input name=\"firstName\" [(ngModel)]=\"editedUser.Number\" type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted &amp;&amp; registerForm.controls.firstName.errors }\"  />\r\n              <div *ngIf=\"registerForm.controls.firstName.errors\" class=\"text-danger\">\r\n                  <div *ngIf=\"registerForm.controls.firstName.errors.required\">Number is required</div>\r\n                  <div *ngIf=\"registerForm.controls.firstName.errors.minlength\">Number must be 11 numbers</div>\r\n                  <div *ngIf=\"registerForm.controls.firstName.errors.pattern\">Number cannnot contain characters</div>\r\n              </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n              <button class=\"btn btn-primary\" [disabled]=\"loginForm.form.invalid\" (click)=\"updateUser()\">Submit</button>\r\n              <button type=\"button\" class=\"btn btn-warning\" (click)=\"cancelNewUser()\">Cancel</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { User } from '../models/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  private upersons: User[] = [\r\n    {\r\n      id:1,\r\n      Name: 'Mohamed',\r\n      Number: '01114356698'\r\n    },\r\n    {\r\n      id:2,\r\n      Name: 'Ahmed',\r\n      Number: '01220290394'\r\n    }\r\n  ];\r\n\r\n  constructor() { }\r\n\r\n  getUsersFromData(): User[] {\r\n    return this.upersons;\r\n  }\r\n\r\n  addUser(user: User) {\r\n    user.id = this.upersons.length + 1;\r\n    this.upersons.push(user);\r\n\r\n  }\r\n  updateUser(user: User) {\r\n    const index = this.upersons.findIndex(u => user.id === u.id);\r\n    this.upersons[index] = user;\r\n  }\r\n  deleteUser(user: User) {\r\n    this.upersons.splice(this.upersons.indexOf(user), 1);\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}